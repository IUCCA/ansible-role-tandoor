---
- name: Ensure tandoor paths exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0750
    owner: 0
    group: 0
  with_items:
    - "{{ tandoor_base_path }}"
    - "{{ tandoor_data_path }}"

- name: Ensure tandoor data subdir paths with 755 exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: 0
    group: 0
  with_items:
    - "{{ tandoor_staticfiles_path }}"
    - "{{ tandoor_mediafiles_path }}"

- name: Ensure tandoor support files installed
  ansible.builtin.template:
    src: "{{ role_path }}/templates/{{ item }}.j2"
    dest: "{{ tandoor_base_path }}/{{ item }}"
    mode: 0640
    owner: "{{ tandoor_uid }}"
    group: "{{ tandoor_gid }}"
  with_items:
    - env
    - labels

- name: Create nginx config if tandoor_path_prefix is set
  block:
    - name: Create nginx directory
      ansible.builtin.file:
        path: "{{ tandoor_nginx_path }}"
        state: directory
        owner: 0
        group: 0
        mode: "0755"

    - name: Deploy nginx template
      ansible.builtin.template:
        src: "templates/nginx_recipes.conf.j2"
        dest: "/{{ tandoor_nginx_path }}/nginx_recipes.conf"
        owner: 0
        group: 0
        mode: "0640"
  when: tandoor_path_prefix and tandoor_path_prefix != '/'

- name: Remove nginx config if tandoor_path_prefix is not set
  block:
    - name: Remove nginx folder
      ansible.builtin.file:
        path: "{{ tandoor_nginx_path }}"
        state: absent
  when: not tandoor_path_prefix or tandoor_path_prefix =="/"
  

- name: Ensure tandoor container image is pulled via community.docker.docker_image
  when: devture_systemd_docker_base_container_image_pull_method == 'ansible-module'
  community.docker.docker_image:
    name: "{{ tandoor_container_image }}"
    source: "{{ 'pull' if ansible_version.major > 2 or ansible_version.minor > 7 else omit }}"
    force_source: "{{ tandoor_container_image_force_pull if ansible_version.major > 2 or ansible_version.minor >= 8 else omit }}"
    force: "{{ omit if ansible_version.major > 2 or ansible_version.minor >= 8 else tandoor_container_image_force_pull }}"
  register: image_pull_result
  retries: "{{ devture_playbook_help_container_retries_count }}"
  delay: "{{ devture_playbook_help_container_retries_delay }}"
  until: image_pull_result is not failed

- name: Ensure tandoor container image is pulled via command
  when: devture_systemd_docker_base_container_image_pull_method == 'command'
  ansible.builtin.command:
    cmd: "{{ devture_systemd_docker_base_host_command_docker }} pull {{ tandoor_container_image }}"
  register: image_pull_result
  retries: "{{ devture_playbook_help_container_retries_count }}"
  delay: "{{ devture_playbook_help_container_retries_delay }}"
  until: image_pull_result is not failed
  changed_when: "'Downloaded newer image' in image_pull_result.stdout"

- name: Ensure tandoor container network is created via community.docker.docker_network
  when: devture_systemd_docker_base_container_network_creation_method == 'ansible-module'
  community.general.docker_network:
    enable_ipv6: "{{ devture_systemd_docker_base_ipv6_enabled }}"
    name: "{{ tandoor_container_network }}"
    driver: bridge
    driver_options: "{{ devture_systemd_docker_base_container_networks_driver_options }}"

- name: Ensure tandoor container network is created via ansible.builtin.command
  when: devture_systemd_docker_base_container_network_creation_method == 'command'
  ansible.builtin.command:
    cmd: >-
      {{ devture_systemd_docker_base_host_command_docker }} network create
      {% if devture_systemd_docker_base_ipv6_enabled %}--ipv6{% endif %}
      {{ devture_systemd_docker_base_container_networks_driver_options_string }}
      {{ tandoor_container_network }}
  register: network_creation_result
  changed_when: network_creation_result.rc == 0
  failed_when: network_creation_result.rc != 0 and 'already exists' not in network_creation_result.stderr

- name: Ensure tandoor systemd service is present
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  with_items:
    - {src: "{{ role_path }}/templates/systemd/tandoor.service.j2", dest: "{{ devture_systemd_docker_base_systemd_path }}/{{ tandoor_identifier }}.service"}

- name: Check whether systemd service files exist
  ansible.builtin.stat:
    path: "{{ devture_systemd_docker_base_systemd_path }}/{{ item }}.service"
  loop:
    - "{{ tandoor_api_identifier }}"
    - "{{ tandoor_frontend_identifier }}"
  register: service_files

- name: Only stop services with existing service files
  ansible.builtin.service:
    name: "{{ item.item }}.service"
    state: stopped
    enabled: false
    daemon_reload: true
  loop: "{{ service_files.results }}"
  when: item.stat.exists

- name: Delete unnecessary files from old version
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ devture_systemd_docker_base_systemd_path }}/{{ tandoor_api_identifier }}.service"
    - "{{ devture_systemd_docker_base_systemd_path }}/{{ tandoor_frontend_identifier }}.service"
    - "{{ tandoor_base_path }}/labels-api"
    - "{{ tandoor_base_path }}/labels-frontend"
